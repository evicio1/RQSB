@page "/bonus"
@using System.Globalization
@using SalaryBonusCalculators.Data
@inject IJSRuntime JSRuntime
@inherits BonusCalculation    

<h2>Bonus Calculator</h2>

<div class="calc-container">
    <div class="form-group row">
        <label for="L13" class="col-sm-8 col-form-label">Månadens orderingång:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="L13" class="form-control input-lg" inputmode="decimal" @bind-value="Data1.L13String" @oninput="@(e => OnInput(e, x => Data1.L13 = x))"
                       @onfocusin="@(e => OnFocusIn(Data1.L13, Data1.L13String, y => Data1.L13String = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.L13, y => Data1.L13String = y))" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="L14" class="col-sm-8 col-form-label">6-mån snitt, om avvikande:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="L14" class="form-control input-lg" inputmode="decimal" @bind-value="Data1.L14String" @oninput="@(e => OnInput(e, x => Data1.L14 = x))"
                       @onfocusin="@(e => OnFocusIn(Data1.L14, Data1.L14String, y => Data1.L14String = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.L14, y => Data1.L14String = y))" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="L15" class="col-sm-8 col-form-label">Snittprovision (%):</label>
        <div class="col-sm-4">
            <div class="input-group">
                <input id="L15" class="form-control input-lg" inputmode="decimal" @bind="Data1.L15String" @oninput="@(e => OnInput(e, x => Data1.L15 = x))"
                       @onfocusin="@(e => OnFocusIn(Data1.L15, Data1.L15String, y => Data1.L15String = y))"
                       @onfocusout="@(e => OnFocusOut(Format.Percent, Data1.L15, y => Data1.L15String = y))" />
                <div class="input-group-append">
                    <span class="input-group-text">%</span>
                </div>
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="EmployeeName" class="col-sm-8 col-form-label">Namn:</label>
        <div class="col-sm-4">
            <input id="EmployeeName" class="form-control input-lg" inputmode="string" @bind="Data1.EmployeeName" />
        </div>
    </div>
</div>
<table class="table table-info" sstyle="width: 900px;">
    <thead>
        <tr>
            <th scope="col">&nbsp;&nbsp;&nbsp;&nbsp;</th>
            <th scope="col">Extraprovision</th>
            <th scope="col">Xtra-gräns-1</th>
            <th scope="col">Xtra-proc-1</th>
            <th scope="col">Xtra-gräns-2</th>
            <th scope="col">Xtra-proc-2</th>
            <th scope="col">Bon-ber-order</th>
            <th scope="col">Snitt-12 mån</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th scope="row"></th>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="L2" class="form-control input-lg grid-control-width" inputmode="decimal" readonly @bind="Data1.L2String"  />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="M2" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.M2String" @oninput="@(e => OnInput(e, x => Data1.M2 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.M2, Data1.M2String, y => Data1.M2String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.M2, y => Data1.M2String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="N2" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.N2String" @oninput="@(e => OnInput(e, x => Data1.N2 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.N2, Data1.N2String, y => Data1.N2String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Percent, Data1.N2, y => Data1.N2String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="O2" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.O2String" @oninput="@(e => OnInput(e, x => Data1.O2 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.O2, Data1.O2String, y => Data1.O2String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.O2, y => Data1.O2String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="P2" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.P2String" @oninput="@(e => OnInput(e, x => Data1.P2 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.P2, Data1.P2String, y => Data1.P2String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Percent, Data1.P2, y => Data1.P2String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="Q2" class="form-control input-lg grid-control-width" inputmode="decimal" readonly @bind="Data1.Q2String" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="R2" class="form-control input-lg grid-control-width" inputmode="decimal" readonly @bind="Data1.R2String" />
                </div>
            </td>
        </tr>
    </tbody>
</table>
<table class="table table-warning" sstyle="width: 900px;">
    <thead>
        <tr>
            <th scope="col">Gul </th>
            <th scope="col">Månadsbonus</th>
            <th scope="col">Snittbonus</th>
            <th scope="col">Gul-mån-gräns</th>
            <th scope="col">Gult-mån-bel</th>
            <th scope="col">Gul-sn-gräns</th>
            <th scope="col">Gult-sn-bel</th>
            <th scope="col">Snittprovision</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th scope="row"></th>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="L4" class="form-control input-lg grid-control-width" inputmode="decimal" readonly @bind="Data1.L4String"  />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="M4" class="form-control input-lg grid-control-width" inputmode="decimal" readonly @bind="Data1.M4String" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="N4" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.N4String" @oninput="@(e => OnInput(e, x => Data1.N4 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.N4, Data1.N4String, y => Data1.N4String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.N4, y => Data1.N4String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="O4" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.O4String" @oninput="@(e => OnInput(e, x => Data1.O4 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.O4, Data1.O4String, y => Data1.O4String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.O4, y => Data1.O4String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="P4" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.P4String" @oninput="@(e => OnInput(e, x => Data1.P4 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.P4, Data1.P4String, y => Data1.P4String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.P4, y => Data1.P4String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="Q4" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.Q4String" @oninput="@(e => OnInput(e, x => Data1.Q4 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.Q4, Data1.Q4String, y => Data1.Q4String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.Q4, y => Data1.Q4String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="R4" class="form-control input-lg grid-control-width" inputmode="decimal" readonly @bind="Data1.R4String" />
                </div>
            </td>
        </tr>
    </tbody>
</table>
<table class="table table-success" sstyle="width: 900px;">
    <thead>
        <tr>
            <th scope="col">Grön</th>
            <th scope="col">Månadsbonus</th>
            <th scope="col">Snittbonus</th>
            <th scope="col">Gul-mån-gräns</th>
            <th scope="col">Gult-mån-bel</th>
            <th scope="col">Gul-sn-gräns</th>
            <th scope="col">Gult-sn-bel</th>
            <th scope="col">Summa lön</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th scope="row"></th>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="L6" class="form-control input-lg grid-control-width" inputmode="decimal" readonly @bind="Data1.L6String" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="M6" class="form-control input-lg grid-control-width" inputmode="decimal" readonly @bind="Data1.M6String" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="N6" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.N6String" @oninput="@(e => OnInput(e, x => Data1.N6 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.N6, Data1.N6String, y => Data1.N6String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.N6, y => Data1.N6String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="O6" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.O6String" @oninput="@(e => OnInput(e, x => Data1.O6 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.O6, Data1.O6String, y => Data1.O6String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.O6, y => Data1.O6String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="P6" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.P6String" @oninput="@(e => OnInput(e, x => Data1.P6 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.P6, Data1.P6String, y => Data1.P6String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.P6, y => Data1.P6String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="Q6" class="form-control input-lg grid-control-width" inputmode="decimal" @bind-value="Data1.Q6String" @oninput="@(e => OnInput(e, x => Data1.Q6 = x))"
                           @onfocusin="@(e => OnFocusIn(Data1.Q6, Data1.Q6String, y => Data1.Q6String = y))"
                           @onfocusout="@(e => OnFocusOut(Format.Currency, Data1.Q6, y => Data1.Q6String = y))" />
                </div>
            </td>
            <td>
                <div class="input-group">
                    <!--Update when bind:format supports currency formats -->
                    <input id="R6" class="form-control input-lg grid-control-width" inputmode="decimal" readonly @bind="Data1.R6String" />
                </div>
            </td>
        </tr>
    </tbody>
</table>
<div class="calc-container">
    <div class="form-group row">
        <label for="L131" class="col-sm-4 col-form-label">Bonusberättigad orderingång:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="L131" class="form-control input-lg" inputmode="decimal" readonly @bind="Data1.L13String"/>
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="L141" class="col-sm-4 col-form-label">6-månaders snittomsättning:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="L141" class="form-control input-lg" inputmode="decimal" readonly @bind="Data1.L14String" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="R41" class="col-sm-8 col-form-label">Grundprovision:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="R41" class="form-control input-lg" inputmode="decimal" readonly @bind="Data1.R4String" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="L21" class="col-sm-8 col-form-label">Extraprovision över:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="L21" class="form-control input-lg" inputmode="decimal" readonly @bind="Data1.L2String" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="L41" class="col-sm-8 col-form-label">Gul månadsbonus:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="L41" class="form-control input-lg" inputmode="decimal" readonly @bind="Data1.L4String" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="M41" class="col-sm-8 col-form-label">Grön månadsbonus:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="M41" class="form-control input-lg" inputmode="decimal" readonly @bind="Data1.M4String" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="L61" class="col-sm-8 col-form-label">Grön snittbonus:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="L61" class="form-control input-lg" inputmode="decimal" readonly @bind="Data1.L6String" />
            </div>
        </div>
    </div>
    <div class="form-group row">
        <label for="M61" class="col-sm-8 col-form-label">Gul snittbonus:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <!--Update when bind:format supports currency formats -->
                <input id="M61" class="form-control input-lg" inputmode="decimal" readonly @bind="Data1.M6String" />
            </div>
        </div>
    </div>
    <div class="form-group row highlight-color">
        <label for="sumstring" class="col-sm-8 col-form-label">Summa provision och bonus:</label>
        <div class="col-sm-4">
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">@(NumberFormatInfo.CurrentInfo.CurrencySymbol)</span>
                </div>
                <input id="sumstring" class="form-control input-lg" readonly @bind="Data1.SumString" />
            </div>
        </div>
    </div>
</div>

@code { 
    BonusCalculation Data1 = new BonusCalculation();

    //Hopefully the following event handlers will not be necessary
    //  once Blazor bind:format supports currency and number formatting.
    //  Monitor this issue for updates: https://github.com/aspnet/AspNetCore/issues/5523

    // The OnInput handler receives a delegate for the property to modify
    //      It validates the data and updates the FVCalculation object
    // The OnFocusIn handler clear currency and percentage formatting
    //      Issue: When custom OnFocusIn handler is set, contents of <input> field are not highlighted when field gains focus
    // The OnFocusOut handler formats string for currency, percentage

    private void OnInput(ChangeEventArgs e, Action<double> setProperty)
    {
        //setProperty delegate will assign double value to the property passed from <input>
        try
        {
            setProperty(Math.Round(Double.Parse(e.Value.ToString()), 2));
        }
        catch (Exception ex)
        {
            setProperty(0);
        }
        UpdateAll();
    }

    private void OnFocusIn(double propValue, string stringValue, Action<string> setString)
    {
        //propValue contains the value of the property passed from <input>
        //stringValue contains the value of the corresponding string passed from <input>
        //setString delegate will assign value to the property passed from <input>
        if (!string.IsNullOrEmpty(stringValue))
            setString(String.Format("{0:0.##}", propValue));
    }

    private void OnFocusOut(Format format, double propValue, Action<string> setString)
    {
        //propValue contains the value of the property passed from <input>
        //setString delegate will assign value to the property passed from <input>
        switch (format)
        {
            case (Format.Currency):
                //Used for formatting currencies
                setString(String.Format("{0:N0}", propValue));
                break;
            case (Format.Percent):
                //Used for formatting percentages
                //Not really necessary anymore since we're adding % to inputgroup with bootstrap
                //setString(String.Format("{0:N}%", propValue));
                setString(String.Format("{0:N2}", propValue));
                break;
            case (Format.None):
                // This is used for vars that need no formatting.
                // Why not just bind to number directly?
                //    Because binding to string allows empty string on load and on reset click
                setString(propValue.ToString());
                break;
        }
    }

    //This method is called with each oninput event
    //  Why? Because this is a client-side and I don't have to worry about my server resources ^_^
    //  I could do this with an event handler and custom setter for each property,
    //      but I didn't feel like having a bunch of duplicated code
    private void UpdateAll()
    {
        Data1.CalculateBonus();
        SetStrings();

    }

    //Update the bound strings.  This will display the results
    private void SetStrings()
    {
        if (!double.IsNaN(Data1.L13))
        {
            Data1.Q2String = String.Format("{0:N2}", Data1.Q2);
            Data1.R2String = String.Format("{0:N2}", Data1.R2);
            Data1.L2String = String.Format("{0:N2}", Data1.L2);

            Data1.L4String = String.Format("{0:N2}", Data1.L4);
            Data1.M4String = String.Format("{0:N2}", Data1.M4);
            Data1.R4String = String.Format("{0:N2}", Data1.R4);

            Data1.L6String = String.Format("{0:N2}", Data1.L6);
            Data1.M6String = String.Format("{0:N2}", Data1.M6);
            Data1.R6String = String.Format("{0:N2}", Data1.R6);

            Data1.SumString = String.Format("{0:N2}", Data1.Sum);
        }
    }

    //This handler just scrolls page to bottom.  No way to scroll to div
    //Calculate button actually doesn't calculate, because calculations are done oninput
    //Kind of a fake button to make UI intuitive
    private async void GoToResults()
    {
        //Using JS Interop because Blazor does not yet support hashed routes (#results)
        await JSRuntime.InvokeVoidAsync("ScrollToBottom");
    }

    private void ResetAll()
    {
        Data1 = new BonusCalculation();
    }
}
